#version 450


#ifdef _WIN32
typedef unsigned int uint;
#endif

#ifdef _WIN32
struct ComputeUPC {
#else
layout(push_constant) uniform UPC {
#endif
	uint stage;
};

layout (binding = 0, rgba32ui) uniform uimage2D prng_state;
layout (binding = 1, rgba32ui) uniform uimage2D site_bits;
layout (binding = 2, r32ui)    uniform uimage2D vote;
layout (binding = 3, rgba8ui)  uniform uimage2D color;
layout (binding = 4, r32ui)    uniform uimage2D event_count;
layout (binding = 5, rgba32ui) uniform uimage2D dev;

layout (local_size_x = 16, local_size_y = 16) in;

uint uint_hash(uint x) {
    x = (x ^ 61U) ^ (x >> 16U);
    x *= 9U;
    x = x ^ (x >> 4U);
    x *= 0x27d4eb2dU;
    x = x ^ (x >> 15U);
    return x;
}

void main() {
	if (stage == 0) {
		imageStore(vote, ivec2(gl_GlobalInvocationID.xy), uvec4(0xffffffff));
	} else if (stage == 1) {
		uint h = imageLoad(vote, ivec2(gl_GlobalInvocationID.xy)).x;
		for (int i = 0; i < 32; ++i)
			h = uint_hash(h);
		imageStore(vote, ivec2(gl_GlobalInvocationID.xy), uvec4(h));
	} else if (stage == 2) {
		uint h = imageLoad(vote, ivec2(gl_GlobalInvocationID.xy)).x;
		uvec4 rgba = uvec4((h&0xff), (h>>8)&0xff, (h>>16)&0xff, 0xff);
		imageStore(color, ivec2(gl_GlobalInvocationID.xy), rgba);
	} else {
		imageStore(color, ivec2(gl_GlobalInvocationID.xy), uvec4(255,0,255,255));
	}
}